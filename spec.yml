openapi: "3.0.2"
info:
  title: Web Engineering Music API
  version: "1.0"
  description: |
    This is the API for the Web Engineering Music API.
    It is a simple API for managing a music library.

servers:
  - url: http://localhost:8080
    description: Big things
# required is the min ammount of data we need to create a new entry to the db
# we wouldn't need id as it would be auto generated by the server
components:
  schemas:
    Song:
      type: object
      required:
        - songId
        - title
        - artistId
        - releaseDate
        - popularity
        - artists
      properties:
        songId:
          type: integer
          description: The id of the song
        title:
          type: string
          description: The title of the song
          readOnly: true
        artistId:
          type: integer
          description: The id of the artist who wrote the song
        popularity:
          type: integer
          description: The popularity of the song
          readOnly: true
          minimum: 0
          maximum: 100
        releaseDate:
          type: string
          description: The date the song was released
          format: date
        artists:
          type: array
          description: The artists who wrote the song
          items:
            $ref: '#/components/schemas/Artist'

    Artist:
      type: object
      required:
        - artistId
        - name
      properties:
        artistId:
          type: integer
          description: The id of the artist
        name:
          type: string
          description: The name of the artist
          readOnly: true
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
        # Check how to get number of songs?
        numSongs:
          type: integer
          description: The number of songs the artist has written
          readOnly: true
        popularity:
          type: integer
          description: The popularity of the artist
          readOnly: true
          minimum: 0
          maximum: 100

    # What should we include in required vs properties
    # for eg. here name and id
    ArtistSummary:
      type: object
      required:
        - "name"
      properties:
        id:
          type: integer
          description: The id of the artist
        name:
          type: string
          description: The name of the artist

    songFilterKeys:
      type: string
      enum:
        - title
        - releaseDate
        - popularity


  responses:
    BadRequest:
      description: Request was not well-formed, see error details
      content:
        application/json:
          schema:
            type: object
            properties:
              error-message:
                type: string
                description: Error message detailing the problem with the request

    NotFound:
      description: Resource not found

    NoResults:
      description: List empty; no results

    Conflict:
      description: Resource already exists

    ServerError:
      description: Server error, try again later

  parameters:
    song-filter-title:
      name: title
      in: query
      required: false
      description: Filtering the results by title
      schema:
        type: string

    song-filter-id:
      name: id
      in: query
      required: false
      description: Filtering the results by id
      schema:
        type: integer

    song-filter-artist-id:
      name: artistId
      in: query
      required: false
      description: Filtering the results by artist id
      schema:
        type: integer

    song-filter-artist-name:
      name: artistName
      in: query
      required: false
      description: Filtering the results by artist name
      schema:
        type: string

    song-filter-release-date:
      name: releaseDate
      in: query
      required: false
      description: Filtering the results by release date
      schema:
        type: string


    limit:
      name: limit
      in: query
      required: true
      description: Limit the number of returned items
      schema:
        type: integer
        enum: [10, 20, 50, 100]


    song-filter-year:
      name: year
      in: query
      required: false
      description: Filtering the results by year
      schema:
        type: integer

paths:
  /songs:
    get: # get song by name, or year + popularity
      tags:
        - Songs
      description: Retrieves a list of songs by title, or the top songs of a year ordered by descending popularity, with the given limit
      summary: Retrieve a list of (selected) songs
      parameters:
        - $ref: "#/components/parameters/song-filter-title"
        - $ref: "#/components/parameters/song-filter-year"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song" # song summary?
        "204":
          $ref: "#/components/responses/NoResults"
        "400":
          $ref: "#/components/responses/BadRequest"
        "5XX":
          $ref: "#/components/responses/ServerError"


  /songs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the song
        schema:
          type: integer

    get: # get song by id
      tags:
        - Songs
      summary: Retrieve a song
      description: Retrieves the song with the given id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"

        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - Songs
      summary: Create a song
      description: Creates a song with the given id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        "200":
          description: "Song added, returns the new state"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

    put:
      tags:
        - Songs
      summary: Update a song
      description: Updates the song with the given id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        "200":
          description: "Song updated, returns the new state"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"

        "400":
          $ref: "#/components/responses/BadRequest"

        '404':
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Songs
      summary: Delete a song
      description: Deletes the song with the given id
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

  #/artists:
    #get: # get artist summary by name, or get top songs (pop desc, top 10/20/50/100)
    #  tags:
    #    - Artists
    #  summary: Retrieve (selected) artist summary or get top songs of specific artist
    #  description: Retrieves a list of artists by name, or the top songs of a specific artist ordered by descending popularity, with the given limit
    #  parameters:
    #    - $ref: "#/components/parameters/ArtistSummary"

  /artists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the artist
        schema:
          type: integer

    get: # get artist summary by id
      tags:
        - Artists
      summary: Retrieve an artist summary
      description: Retrieves a summary of the artist with the given id
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistSummary" # check: does this return what we want?

        "400":
          $ref: "#/components/responses/BadRequest"

        "404":
          $ref: "#/components/responses/NotFound"

        "5XX":
          $ref: "#/components/responses/ServerError"


  /artists/{id}/songs:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the artist
        schema:
          type: integer
  
    get: # get all songs from artist
      tags:
        - Artists
      summary: Retrieve all songs from an artist
      description: Retrieves a list of all songs from the artist with the given ID
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

    delete: 
      tags:
        - Artists
      summary: Delete an artist # TODO: change
      description: Deletes the artist with the given id
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
