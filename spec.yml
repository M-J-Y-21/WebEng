openapi: "3.0.2"
info:
  title: Web Engineering Music API
  version: "1.0"
  description: |
    This is the API for the Web Engineering Music API.
    It is a simple API for managing a music library.

servers:
  - url: http://localhost:3000
    description: Big things

paths:
  /songs:
    get: # get song by title or year ✔
      tags:
        - Songs
      summary: Retrieve songs by title or year
      description: Retrieves a list of songs, optionally filtered by title and/or year, ordered by descending popularity. 
      parameters:
        - $ref: "#/components/parameters/song-title"
        - $ref: "#/components/parameters/song-year"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

    post: # create song by id ✔
      tags:
        - Songs
      summary: Create a song
      description: Creates a song with the given id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        "200":
          description: "Song added, returns the created song"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

  /songs/{id}:
    parameters:
      - $ref: "#/components/parameters/song-id"

    get: # get song by id ✔
      tags:
        - Songs
      summary: Retrieve a song
      description: Retrieves the song with the given id.
      #parameters:
      #  - $ref: "#/components/parameters/song-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

    put: # update song by id ✔
      tags:
        - Songs
      summary: Update a song
      description: Updates the song with the given id.
      #parameters:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        "200":
          description: "Song updated, returns the updated song"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

    delete: # delete song by id ✔
      tags:
        - Songs
      summary: Delete a song
      description: Deletes the song with the given id.
      responses:
        "200":
          description: "Song deleted, returns the deleted song"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /artists/songs:
    get: # get top N artists given a year, limit and skip
      tags:
        - Artists
      summary: Retrieve list of top artists
      description: Retrieves a list of the artists of a year (ordered by descending popularity, with the given limit and number of results to skip).
      parameters:
        - $ref: "#/components/parameters/song-year"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/skip"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Artists
      description: Deletes all songs of an artist.
      summary: Delete all songs of an artist
      parameters:
        - $ref: "#/components/parameters/artist-id"
        - $ref: "#/components/parameters/artist-name"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

  /artists/summary:
    get: # get artist summary by id or name ✔
      tags:
        - Artists
      description: Retrieves number of songs, earliest and latest release by date, highest popularity among all songs) for a specific artist by artist ID or artist name
      summary: Retrieve artist summary
      parameters:
        - $ref: "#/components/parameters/artist-id"
        - $ref: "#/components/parameters/artist-name"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistSummary"
            text/csv:
              schema:
                type: string
        "5XX":
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    Song:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          description: The ID of the song
        title:
          type: string
          description: The title of the song
        artist_ids:
          type: array
          description: The IDs of the artists who wrote the song
          items:
            type: string
            description: The ID of one of the artists who wrote the song
        popularity:
          type: integer
          description: The popularity of the song
          minimum: 0
          maximum: 100
        year:
          type: string
          description: The year the song was released
          format: date

    Artist:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: The ID of the artist
        name:
          type: string
          description: The name of the artist

    ArtistSummary:
      type: object
      required:
        - artist
        - numSongs
        - earliestSong
        - latestSong
        - mostPopularSong
      properties:
        artist:
          $ref: "#/components/schemas/Artist"
        numSongs:
          type: integer
          description: The number of songs the artist has written
        earliestSong:
          $ref: "#/components/schemas/Song"
        latestSong:
          $ref: "#/components/schemas/Song"
        mostPopularSong:
          $ref: "#/components/schemas/Song"

  responses:
    #BadRequest:
    #  description: Request was not well-formed, see error details
    #  content:
    #    application/json:
    #      schema:
    #        type: object
    #        properties:
    #          error-message:
    #            type: string
    #            description: Error message detailing the problem with the request

    #NotFound:
    #  description: Resource not found

    #NoResults:
    #  description: List empty; no results

    #Conflict:
    #  description: Resource already exists

    ServerError:
      description: Server error, try again later

  parameters:
    song-id:
      name: id
      in: path
      required: true
      description: Name of the song
      schema:
        type: integer

    song-title:
      name: title
      in: query
      required: false
      description: Title of the song
      schema:
        type: string

    song-year:
      name: year
      in: query
      required: false
      description: The year the song was released in
      schema:
        type: integer

    artist-id:
      name: id
      in: path
      required: false
      description: ID of the artist
      schema:
        type: integer

    artist-name:
      name: name
      in: path
      required: false
      description: Name of the artist
      schema:
        type: string
    
    limit:
      name: limit
      in: query
      required: false
      description: Limit the number of returned items
      schema:
        type: integer
        enum: [10, 20, 50, 100]
        
    skip:
      name: skip
      in: query
      required: false
      description: The number of items to skip
      schema:
        type: integer
