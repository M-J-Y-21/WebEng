openapi: "3.0.2"
info:
  title: Web Engineering Music API
  version: "1.0"
  description: |
    This is the API for the Web Engineering Music API.
    It is a simple API for managing a music library.

servers:
  - url: http://localhost:8080
    description: Big things

components:
  schemas:
    Song:
      type: object
      required:
        - title
        - year
      properties:
        songId:
          type: integer
          description: The ID of the song
        title:
          type: string
          description: The title of the song
          readOnly: true
        artist-ids:
          type: array
          description: The IDs of the artists who wrote the song
          items:
            type: integer
            description: The ID of one of the artists who wrote the song
        popularity:
          type: integer
          description: The popularity of the song
          readOnly: true
          minimum: 0
          maximum: 100
        year:
          type: string
          description: The year the song was released
          format: date

    Artist:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: The ID of the artist
          readOnly: true
        name:
          type: string
          description: The name of the artist
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
        popularity:
          type: integer
          description: The popularity of the artist
          readOnly: true
          minimum: 0
          maximum: 100

    ArtistSummary:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: The ID of the artist
        name:
          type: string
          description: The name of the artist
        numSongs:
          type: integer
          description: The number of songs the artist has written
        mostPopularSong:
          type: object
          description: The most popular song the artist has written
        earliestSong:
          type: object
          description: The earliest song the artist has written
        latestSong:
          type: object
          description: The latest song the artist has written

  #############################################################################

  responses:
    BadRequest:
      description: Request was not well-formed, see error details
      content:
        application/json:
          schema:
            type: object
            properties:
              error-message:
                type: string
                description: Error message detailing the problem with the request

    NotFound:
      description: Resource not found

    NoResults:
      description: List empty; no results

    Conflict:
      description: Resource already exists

    ServerError:
      description: Server error, try again later

  #############################################################################

  parameters:
    song-id:
      name: id
      in: path
      required: true
      description: Name of the song
      schema:
        type: integer

    artist-id:
      name: id
      in: path
      required: true
      description: ID of the artist
      schema:
        type: integer

    artist-name:
      name: name
      in: path
      required: true
      description: Name of the artist
      schema:
        type: string

    song-filter-title:
      name: title
      in: query
      required: true
      description: Title of the song
      schema:
        type: string

    song-filter-year:
      name: year
      in: query
      required: true
      description: Filtering the results by year
      schema:
        type: integer

    limit:
      name: limit
      in: query
      required: true
      description: Limit the number of returned items
      schema:
        type: integer
        enum: [10, 20, 50, 100]

    content-type:
      name: content-type
      in: query
      description: Content type of the request
      schema:
        type: string
        enum: [application/json, text/csv]

###############################################################################

paths:
  /songs/title:
    get: # get song by title
      tags:
        - Songs
      description: Retrieves a list of songs by title
      summary: Retrieve list of songs matching a title
      parameters:
        - $ref: "#/components/parameters/song-filter-title"
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
        "204":
          $ref: "#/components/responses/NoResults"
        "400":
          $ref: "#/components/responses/BadRequest"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /songs/year:
    get: # get top songs of a year (desc popularity, limit)
      tags:
        - Songs
      description: Retrieves a list of the top songs of a year ordered by descending popularity, with the given limit
      summary: Retrieve list of top songs of a year
      parameters:
        - $ref: "#/components/parameters/song-filter-year"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
        "204":
          $ref: "#/components/responses/NoResults"
        "400":
          $ref: "#/components/responses/BadRequest"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /songs/{id}:
    parameters:
      - $ref: "#/components/parameters/song-id"

    get: # get song by id ✔
      tags:
        - Songs
      summary: Retrieve a song
      description: Retrieves the song with the given id
      parameters:
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

    post: # create song by id ✔
      tags:
        - Songs
      summary: Create a song
      description: Creates a song with the given id
      parameters:
        - $ref: "#/components/parameters/content-type"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        "200":
          description: "Song added, returns the new state"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "5XX":
          $ref: "#/components/responses/ServerError"

    put: # update song by id ✔
      tags:
        - Songs
      summary: Update a song
      description: Updates the song with the given id
      parameters:
        - $ref: "#/components/parameters/content-type"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
      responses:
        "200":
          description: "Song updated, returns the new state"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

    delete: # delete song by id ✔
      tags:
        - Songs
      summary: Delete a song
      description: Deletes the song with the given id
      responses:
        "204":
          description: Song deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /artists/{id}:
    parameters:
      - $ref: "#/components/parameters/artist-id"

    get: # get artist summary by id ✔
      tags:
        - Artists
      summary: Retrieve an artist summary
      description: Retrieves a summary of the artist with the given ID
      parameters:
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistSummary"
            text/csv:
              schema:
                $ref: "#/components/schemas/ArtistSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /artists/{name}:
    parameters:
      - $ref: "#/components/parameters/artist-name"

    get: # get artist summary by name ✔
      tags:
        - Artists
      summary: Retrieve an artist summary
      description: Retrieves a summary of the artist with the given name
      parameters:
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistSummary"
            text/csv:
              schema:
                $ref: "#/components/schemas/ArtistSummary"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /artists/{id}/songs:
    parameters:
      - $ref: "#/components/parameters/artist-id"

    get: # get all songs from artist by id ✔
      tags:
        - Artists
      summary: Retrieve all songs from an artist
      description: Retrieves a list of all songs from the artist with the given ID
      parameters:
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

    delete: # delete all songs from artist by id ✔
      tags:
        - Artists
      summary: Delete all songs from an artist by ID
      description: Deletes all songs from the artist with the given ID
      responses:
        "204":
          description: All songs deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

  /artists/{name}/songs:
    parameters:
      - $ref: "#/components/parameters/artist-name"

    get: # get all songs from artist by name ✔
      tags:
        - Artists
      summary: Retrieve all songs from an artist
      description: Retrieves a list of all songs from the artist with the given name
      parameters:
        - $ref: "#/components/parameters/content-type"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"

    delete: # delete all songs from artist by name ✔
      tags:
        - Artists
      summary: Delete all songs from an artist
      description: Deletes all songs from the artist with the given name
      responses:
        "204":
          description: All songs deleted successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/ServerError"
